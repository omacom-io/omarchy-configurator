#!/bin/bash

# Install prerequisites
if ! command -v gum >/dev/null || ! command -v iwctl >/dev/null || ! command -v tte >/dev/null || ! command -v tzupdate >/dev/null; then
  sudo pacman -S --noconfirm --needed gum iw tte tzupdate
fi

abort() {
  echo "Aborted installation"
  exit 1
}

step() {
  clear
  tte -i logo.txt --frame-rate ${3:-240} ${2:-highlight}
  echo
  echo "$1" | tte --frame-rate 920 wipe
  echo
}

clear_step() {
  clear
  cat logo.txt
  echo
}

# STEP 1: NETWORK

# if ! (ping -c1 archlinux.org &>/dev/null); then
#   step "Detecting Wi-Fi networks..." slice

#   # Get list of interfaces managed by iwd
#   wifi_interfaces=$(iwctl device list | sed -r "s/\x1B\[[0-9;]*[mK]//g" | awk '$NF=="station" {print $1}')
#   wifi_count=$(echo "$wifi_interfaces" | wc -l)

#   if [[ $wifi_count -eq 0 ]]; then
#     echo "No Wi-Fi interfaces found."
#     abort
#   elif [[ $wifi_count -eq 1 ]]; then
#     wifi_iface="$wifi_interfaces"
#   else
#     wifi_iface=$(echo "$wifi_interfaces" | gum choose --header "Select Wi-Fi interface") || abort
#   fi

#   # Scan for networks
#   iwctl station "$wifi_iface" scan
#   sleep 1

#   while true; do
#     networks=$(iwctl station "$wifi_iface" get-networks | sed 's/\x1B\[[0-9;]*[A-Za-z]//g' | awk 'NR>4 && NF {print $1}')
#     ssid=$(echo "$networks" | gum choose --header "Select Wi-Fi network") || abort

#     # Connect (iwd prompts for password if needed)
#     if iwctl station "$wifi_iface" connect "$ssid" && ping -c1 archlinux.org &>/dev/null; then
#       gum spin --spinner "globe" --title "Wi-Fi connection established." -- sleep 2
#       break
#     else
#       gum spin --spinner "globe" --title "Bad password (or other connection error)" -- sleep 1
#       clear_step
#     fi
#   done
# fi

# STEP 2: USER

user_form() {
  step "Let's setup your machine..."

  while true; do
    user_name=$(gum input --placeholder "Alphanumeric without spaces (like dhh)" --prompt.foreground="#845DF9" --prompt "User name> ") || abort

    if [[ "$user_name" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]]; then
      break
    else
      gum spin -s "globe" --title "User name must be alphanumeric with no spaces" -- sleep 1
    fi
  done

  while true; do
    password=$(gum input --placeholder "Used for user + root + encryption" --prompt.foreground="#845DF9" --password --prompt "Password> ") || abort
    password_confirmation=$(gum input --placeholder "Must match the password you just typed" --prompt.foreground="#845DF9" --password --prompt "Confirm> ") || abort

    if [[ "$password" == "$password_confirmation" ]]; then
      break
    else
      gum spin -s "globe" --title "Passwords didn't match!" -- sleep 1
    fi
  done

  # Hash the password using yescrypt
  password_hash=$(openssl passwd -6 "$password")

  full_name=$(gum input --placeholder "Used for git authentication (hit return to skip)" --prompt.foreground="#845DF9" --prompt "Full name> ")
  email_address=$(gum input --placeholder "Used for git authentication (hit return to skip)" --prompt.foreground="#845DF9" --prompt "Email address> ")

  while true; do
    hostname=$(gum input --placeholder "Alphanumeric without spaces (or return for 'omarchy')" --prompt.foreground="#845DF9" --prompt "Hostname> ")

    if [[ "$hostname" =~ ^[a-z_][a-z0-9_-]*[$]?$ ]]; then
      break
    else
      hostname="omarchy"
      break
    fi
  done

  timezone=$(timedatectl list-timezones | gum choose --height 1 --selected=$(tzupdate -p) --header "Timezone") || abort
  locale_full=$(sed 's/ .*//' /usr/share/i18n/SUPPORTED | gum choose --height 1 --selected=en_US.UTF-8 --header "Locale") || abort
  
  # Split locale into separate variables
  locale=$(echo "$locale_full" | cut -d'.' -f1)
  encoding=$(echo "$locale_full" | cut -d'.' -f2)
}

user_form

while true; do
  echo -e "Field,Value\nUser name,$user_name\nPassword,$(printf "%${#password}s" | tr ' ' '*')\nFull name,${full_name:-[Skipped]}\nEmail address,${email_address:-[Skipped]}\nHostname,$hostname\nTimezone,$timezone\nLocale,$locale" | gum table -s "," -p

  echo
  if gum confirm --negative "No, change it" "Does this look right?"; then
    break
  else
    user_form
  fi
done

# STEP 3: DISK

disk_form() {
  step "Let's select where to install Omarchy..." slide

  disk=$(lsblk -dpno NAME,SIZE,TYPE | grep -E '/dev/(sd|hd|vd|nvme|mmcblk)' | awk '{print $1, $2}' | gum choose --header "Select install disk") || abort
  disk=$(echo "$disk" | awk '{print $1}')
}

disk_form

while true; do
  echo -e "Everything will be overwritten. There is no recovery possible."

  echo
  if gum confirm --affirmative "Yes, format disk" --negative "No, change it" "Confirm overwriting ${disk}"; then
    break
  else
    disk_form
  fi
done

clear

cat <<- _EOF_ | tee user_credentials.json
{
    "encryption_password": "$password",
    "users": [
        {
            "enc_password": "$password_hash",
            "groups": [],
            "sudo": true,
            "username": "$user_name"
        }
    ]
}
_EOF_

cat <<- _EOF_ | tee user_configuration.json
{
    "app_config": null,
    "archinstall-language": "English",
    "auth_config": {},
    "bootloader": "Systemd-boot",
    "custom_commands": [],
    "disk_config": {
        "btrfs_options": {
            "snapshot_config": null
        },
        "config_type": "default_layout",
        "device_modifications": [
            {
                "device": "$disk",
                "partitions": [
                    {
                        "btrfs": [],
                        "dev_path": null,
                        "flags": [
                            "boot",
                            "esp"
                        ],
                        "fs_type": "fat32",
                        "mount_options": [],
                        "mountpoint": "/boot",
                        "obj_id": "ea21d3f2-82bb-49cc-ab5d-6f81ae94e18d",
                        "size": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "GiB",
                            "value": 1
                        },
                        "start": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "MiB",
                            "value": 1
                        },
                        "status": "create",
                        "type": "primary"
                    },
                    {
                        "btrfs": [
                            {
                                "mountpoint": "/",
                                "name": "@"
                            },
                            {
                                "mountpoint": "/home",
                                "name": "@home"
                            },
                            {
                                "mountpoint": "/var/log",
                                "name": "@log"
                            },
                            {
                                "mountpoint": "/var/cache/pacman/pkg",
                                "name": "@pkg"
                            }
                        ],
                        "dev_path": null,
                        "flags": [],
                        "fs_type": "btrfs",
                        "mount_options": [
                            "nodatacow"
                        ],
                        "mountpoint": null,
                        "obj_id": "8c2c2b92-1070-455d-b76a-56263bab24aa",
                        "size": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "B",
                            "value": 8588886016
                        },
                        "start": {
                            "sector_size": {
                                "unit": "B",
                                "value": 512
                            },
                            "unit": "B",
                            "value": 1074790400
                        },
                        "status": "create",
                        "type": "primary"
                    }
                ],
                "wipe": true
            }
        ],
        "disk_encryption": {
            "encryption_type": "luks",
            "lvm_volumes": [],
            "partitions": [
                "8c2c2b92-1070-455d-b76a-56263bab24aa"
            ]
        }
    },
    "hostname": "archlinux",
    "kernels": [
        "linux"
    ],
    "locale_config": {
        "kb_layout": "$locale",
        "sys_enc": "$encoding",
        "sys_lang": "en_US.UTF-8"
    },
    "mirror_config": {
        "custom_repositories": [],
        "custom_servers": [{"url": "https://geo.mirror.pkgbuild.com/"}],
        "mirror_regions": {},
        "optional_repositories": []
    },
    "network_config": {
        "type": "iso"
    },
    "ntp": true,
    "packages": [],
    "parallel_downloads": 0,
    "profile_config": {
        "gfx_driver": "All open-source",
        "greeter": "sddm",
        "profile": {
            "custom_settings": {
                "Hyprland": {
                    "seat_access": "polkit"
                }
            },
            "details": [
                "Hyprland"
            ],
            "main": "Desktop"
        }
    },
    "script": null,
    "services": [],
    "swap": true,
    "timezone": "$timezone",
    "version": "3.0.9"
}
_EOF_

# cat <<EOJ
# {
#   "user_name": "$user_name",
#   "password_hash": "$password_hash",
#   "full_name": "$full_name",
#   "email_address": "$email_address",
#   "disk": "$disk"
# }
# EOJ
